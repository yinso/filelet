// Generated by CoffeeScript 1.4.0
(function() {
  var FileCache, FileObject, fs, funclet, helper, loglet;

  funclet = require('funclet');

  loglet = require('loglet');

  fs = require('fs');

  helper = require('./helper');

  FileObject = (function() {

    function FileObject(filePath) {
      this.filePath = filePath;
    }

    FileObject.prototype.load = function(transform, cb) {
      var _this = this;
      return funclet.bind(fs.stat, this.filePath).then(function(stat, next) {
        if (!_this.stat || stat.mtime > _this.stat.mtime) {
          loglet.debug('filelet.cache.load', _this.filePath, stat.mtime);
          _this.stat = {
            mtime: stat.mtime
          };
          return helper.loadFile(_this.filePath, transform, next);
        } else {
          loglet.debug('filelet.cache.load.already', _this.filePath, stat.mtime);
          return next(null, _this.inner);
        }
      })["catch"](cb).done(function(file) {
        _this.inner = file;
        return cb(null, _this.inner);
      });
    };

    return FileObject;

  })();

  FileCache = (function() {

    function FileCache() {
      this.inner = {};
    }

    FileCache.prototype.loadFile = function(filePath, transform, cb) {
      if (arguments.length === 2) {
        cb = transform;
        transform = function(file, next) {
          return next(null, file);
        };
      }
      if (!this.inner.hasOwnProperty(filePath)) {
        this.inner[filePath] = new FileObject(filePath);
      }
      return this.inner[filePath].load(transform, cb);
    };

    FileCache.prototype.loadFiles = function(filePaths, transform, cb) {
      var doHelp,
        _this = this;
      if (arguments.length === 2) {
        cb = transform;
        transform = function(file, next) {
          return next(null, file);
        };
      }
      doHelp = function(filePath, next) {
        return _this.loadFile(filePath, transform, next);
      };
      return funclet.map(filePaths, doHelp)["catch"](cb).done(function(files) {
        return cb(null, files);
      });
    };

    return FileCache;

  })();

  module.exports = FileCache;

}).call(this);
